<?php

/**
 * This file is part of the Lemric package.
 * (c) Lemric
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * @author Dominik Labudzinski <dominik@labudzinski.com>
 */

namespace Lemric\BatchRequest\Tests;

use Lemric\BatchRequest\BatchRequest;
use PHPUnit\Framework\MockObject\Exception;
use PHPUnit\Framework\TestCase;
use Symfony\Component\EventDispatcher\EventDispatcher;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use Symfony\Component\HttpFoundation\{Request, RequestStack, Response};
use Symfony\Component\HttpKernel\Controller\{ArgumentResolver, ControllerResolver};
use Symfony\Component\HttpKernel\HttpKernel;
use Symfony\Component\RateLimiter\RateLimiterFactory;
use Symfony\Component\RateLimiter\Storage\InMemoryStorage;
use Symfony\Component\RateLimiter\Storage\StorageInterface;

class SimpleTest extends TestCase
{
    private HttpKernel $httpKernel;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $eventDispatcher = new EventDispatcher();
        $controllerResolver = new ControllerResolver();
        $argumentResolver = new ArgumentResolver();

        $this->httpKernel = new HttpKernel($eventDispatcher, $controllerResolver, new RequestStack(), $argumentResolver);

    }

    /**
     * @throws Exception
     */
    public function testHandleGet(): void
    {
        $httpKernel = $this->createMock(HttpKernel::class);
        $request = new Request([], [
            'include_headers' => 'false',
        ], [], [], [], [], '[{"method":"GET","relative_url":"/"},{"method":"GET","relative_url":"/"}]');
        $batchRequest = new BatchRequest($httpKernel);
        $this->assertSame('[{"code":200,"body":[]},{"code":200,"body":[]}]', $batchRequest->handle($request)->getContent());
    }

    /**
     * @throws Exception
     */
    public function testHandleGetWithHeaders(): void
    {
        $httpKernel = $this->createMock(HttpKernel::class);
        $request = new Request([], [
            'include_headers' => 'false',
        ], [], [], [], [], '[{"method":"GET","relative_url":"/"},{"method":"GET","relative_url":"/"}]');
        $request->headers->add([
            'content-type' => 'application/json',
        ]);
        $batchRequest = new BatchRequest($httpKernel);
        $this->assertSame('[{"code":200,"body":[]},{"code":200,"body":[]}]', $batchRequest->handle($request)->getContent());
    }

    /**
     * @throws Exception
     */
    public function testHandleGetWithHeadersInResponse(): void
    {
        $httpKernel = $this->createMock(HttpKernel::class);
        $request = new Request([], [
            'include_headers' => 'true',
        ], [], [], [], [], '[{"method":"GET","relative_url":"/"},{"method":"GET","relative_url":"/"}]');
        $request->headers->add([
            'content-type' => 'application/json',
        ]);
        $batchRequest = new BatchRequest($httpKernel);
        $this->assertSame('[{"code":200,"body":[],"headers":{"content-type":"application\/json"}},{"code":200,"body":[],"headers":{"content-type":"application\/json"}}]', $batchRequest->handle($request)->getContent());
    }

    /**
     * @throws Exception
     */
    public function testHandleMixed(): void
    {
        $httpKernel = $this->createMock(HttpKernel::class);
        $request = new Request([], [
            'include_headers' => 'false',
        ], [], [], [], [], '[{"method":"POST","relative_url":"/"},{"method":"GET","relative_url":"/"}]');
        $batchRequest = new BatchRequest($httpKernel);
        $this->assertSame('[{"code":200,"body":[]},{"code":200,"body":[]}]', $batchRequest->handle($request)->getContent());
    }

    /**
     * @throws Exception
     */
    public function testHandlePost(): void
    {
        $httpKernel = $this->createMock(HttpKernel::class);
        $request = new Request([], [
            'include_headers' => 'false',
        ], [], [], [], [], '[{"method":"POST","relative_url":"/"},{"method":"POST","relative_url":"/"}]');
        $batchRequest = new BatchRequest($httpKernel);
        $this->assertSame('[{"code":200,"body":[]},{"code":200,"body":[]}]', $batchRequest->handle($request)->getContent());
    }

    /**
     * @throws Exception
     */
    public function testHandleUpload(): void
    {
        $httpKernel = $this->createMock(HttpKernel::class);
        $file1 = $this->createMock(UploadedFile::class);
        $file2 = $this->createMock(UploadedFile::class);
        $file3 = $this->createMock(UploadedFile::class);
        $request = new Request([], [
            'include_headers' => 'false',
        ], [], [], [
            'file1' => $file1,
            'file2' => $file2,
            'file3' => $file3,
        ], [], '[{"method":"POST","relative_url":"me/photos","body":"message=My cat photo","attached_files":"file1 ,file2"},{"method":"POST","relative_url":"me/photos","body":"message=My dog photo","attached_files":"file3"}]');
        $batchRequest = new BatchRequest($httpKernel);
        $this->assertSame('[{"code":200,"body":[]},{"code":200,"body":[]}]', $batchRequest->handle($request)->getContent());
    }

    /**
     * @throws Exception
     */
    public function testHandleWithRealKernel(): void
    {
        $request = new Request([], [
            'include_headers' => 'false',
        ], [], [], [], [], '[{"method":"POST","relative_url":"/"},{"method":"GET","relative_url":"/"}]');
        $batchRequest = new BatchRequest($this->httpKernel);
        $jsonResponse = $batchRequest->handle($request);

        $this->assertSame($jsonResponse->getStatusCode(), 200);
        $this->assertSame('[{"code":404,"body":{"error":{"type":"NotFoundHttpException","message":"Unable to find the controller for path \"\/\". The route is wrongly configured."}}},{"code":404,"body":{"error":{"type":"NotFoundHttpException","message":"Unable to find the controller for path \"\/\". The route is wrongly configured."}}}]', $jsonResponse->getContent());
    }

    public function testHandleLimitedGet(): void
    {
        if(class_exists(RateLimiterFactory::class)) {
            $httpKernel = $this->createMock(HttpKernel::class);
            $rateLimiter = new RateLimiterFactory([
                'id' => 'test',
                'policy' => 'token_bucket',
                'limit' => 2,
                'rate' => [
                    'interval' => '15 minutes',
                    'amount' => 500
                ]
            ], new InMemoryStorage());
            $request = new Request([], [
                'include_headers' => 'false',
            ], [], [], [], [], '[{"method":"GET","relative_url":"/"},{"method":"GET","relative_url":"/"}]');
            $batchRequest = new BatchRequest($httpKernel, $rateLimiter);
            $this->assertSame('[{"code":200,"body":[]},{"code":200,"body":[]}]', $batchRequest->handle($request)->getContent());
            $response = $batchRequest->handle($request);
            $this->assertSame(Response::HTTP_TOO_MANY_REQUESTS, $response->getStatusCode(), $response->getContent());
        } else {
            $this->markTestSkipped('Install symfony/rate-limiter to control the request limit.');
        }
    }
}
